{"type":"entity","name":"expo-core-purpose-2024","entityType":"platform_overview","observations":["Purpose: Comprehensive React Native development platform simplifying mobile app building, testing, and deployment","Universal platform support: iOS, Android, Web, experimental desktop","Cloud-based infrastructure: EAS services for building, updating, and deploying","Zero native configuration required to get started","Over-the-air updates without app store approval"]}
{"type":"entity","name":"expo-web-support-setup","entityType":"direct_action","observations":["Install dependencies: npx expo install react-native-web react-dom","Optional optimizations: npx expo install @expo/webpack-config","Start web server: npx expo start --web","Build for production: npx expo export --platform web","Platform detection: Platform.OS === 'web'"]}
{"type":"entity","name":"expo-new-architecture-2024","entityType":"technical_specification","observations":["New Architecture enabled by default in SDK 53+","JSI Integration for seamless native code communication","Fabric Renderer for improved UI rendering performance","TurboModules for enhanced native module performance","File-based routing with Expo Router (Next.js-style)"]}
{"type":"entity","name":"expo-managed-vs-bare-2024","entityType":"workflow_comparison","observations":["Managed workflow: No android/ios directories, Continuous Native Generation (CNG)","Bare workflow: Full native code access with android/ios directories","2024 update: Lines blurred - easy transitions without ejecting","Config Plugins handle most native configurations in managed workflow","Recommendation: Start with managed workflow"]}
{"type":"entity","name":"eas-cloud-services-suite","entityType":"service_platform","observations":["EAS Build: Cross-platform cloud building, works without Mac for iOS","EAS Update: Over-the-air updates with rollback capability","EAS Submit: Automated app store submission service","EAS Metadata: Centralized app store metadata management","CI/CD Integration: GitHub Actions and other pipeline support"]}
{"type":"entity","name":"expo-development-tools-2024","entityType":"toolchain","observations":["Expo Go: Quick prototyping sandbox with SDK limitations","Development Builds: Custom debug builds with full library support","Expo Orbit: Desktop app for managing simulators and builds","Expo CLI: Primary command-line interface with npx expo commands","expo-doctor: Health checks and diagnostics"]}
{"type":"entity","name":"expo-dependency-management-critical","entityType":"critical_constraint","observations":["NEVER use npm install --legacy-peer-deps with Expo projects","Always use: npx expo install package-name","Automatic version resolution for Expo SDK compatibility","Prevents React Native version mismatches and platform conflicts","Use npx expo doctor --fix-dependencies for debugging"]}
{"type":"entity","name":"expo-performance-optimizations","entityType":"best_practices","observations":["New Architecture eliminates bridge bottlenecks","EAS Build includes only necessary libraries","Use expo-image for optimized image handling","FlatList optimization with removeClippedSubviews and batch rendering","Lazy loading for routes and components"]}
{"type":"entity","name":"expo-limitations-2024","entityType":"constraints","observations":["Bundle size may be larger due to included libraries","React Native version updates may lag by weeks/months","Some advanced platform-specific features need bare workflow","Enterprise constraints around cloud-based building","Many traditional limitations resolved with Config Plugins"]}
{"type":"entity","name":"expo-project-structure-best-practices","entityType":"organization_pattern","observations":["Use src/ directory for all source code","src/app/ for Expo Router (file-based routing)","Feature-based modules in src/features/","Separate style files with .styles.ts naming","Platform-specific files with .web.tsx, .native.tsx extensions"]}
{"type":"entity","name":"modern-sdlc-2025","entityType":"development_methodology","observations":["Evolution from waterfall to integrated iterative processes","DevOps teams deploy 208x more frequently, 106x faster, 7x fewer failures","CI/CD with automated testing and deployment pipelines","Infrastructure as Code and real-time monitoring","Security integration throughout lifecycle (DevSecOps)"]}
{"type":"entity","name":"devsecops-practices","entityType":"security_integration","observations":["Static Application Security Testing (SAST) with SonarQube in CI","Dynamic Application Security Testing (DAST) on running applications","Software Composition Analysis (SCA) for dependency vulnerabilities","Reduced high-severity vulnerabilities by 50% in 6 months at companies like Capital One","Security no longer afterthought but integrated throughout SDLC"]}
{"type":"entity","name":"modern-testing-transformation","entityType":"quality_assurance","observations":["AI-driven automation with self-healing test cases","Test-Driven Development: Red-Green-Refactor cycle","Shift-Left Testing: Early testing in development cycle","AI tools detect code changes and update test scripts automatically","Automated test generation streamlining creation and maintenance"]}
{"type":"entity","name":"2025-technology-trends","entityType":"emerging_practices","observations":["GitOps: Git-based workflows for infrastructure management","Serverless deployments for lightweight scalable applications","Policy as Code with automated compliance checks","AI-powered insights for predictive failure detection","Cross-functional autonomous teams handling entire lifecycle"]}
{"type":"entity","name":"llm-context-optimization-research","entityType":"technical_research","observations":["Current system achieves 90% token reduction, could reach 95-98%","LLMLingua achieves 20x compression maintaining quality","Markdown 15% more token-efficient than JSON","Hierarchical Knowledge Graphs with Microsoft GraphRAG","TokenSkip reduces reasoning tokens by 40% with <0.4% performance drop"]}
{"type":"entity","name":"advanced-compression-techniques-2025","entityType":"optimization_methods","observations":["LLMLingua & TokenSkip for 20x compression","GemFilter: 2.4x speedup, 30% GPU memory reduction","Semantic compression with sentence-level importance scoring","Dynamic context management with Twilight adaptive attention","XML best format for Claude models specifically"]}
{"type":"entity","name":"knowledge-graph-integration","entityType":"information_architecture","observations":["Microsoft GraphRAG with bottom-up clustering","Neo4j LLM Knowledge Graph Builder with community summaries","Entity resolution system (RN vs React Native vs react-native)","Relationship mapping with dependency tracking","Hierarchical clustering using Leiden algorithm"]}
{"type":"entity","name":"runbook-agent-configuration","entityType":"automation_framework","observations":["XML-structured role definitions for Claude","Two-level architecture: Primary orchestrator + Runbook executors","Pure function agents: same input = same output","Atomic task decomposition with clear verification","Deterministic execution with no conversation history"]}
{"type":"entity","name":"runbook-best-practices","entityType":"implementation_pattern","observations":["Each step needs: Action, Context, Verification, Error Path","Use Claude Code tools effectively: Grep → Read → Edit → Bash","Iterative refinement with edge case capture","Production templates for feature implementation and debugging","XML format with phase-based organization"]}
{"type":"entity","name":"agent-success-factors","entityType":"quality_criteria","observations":["Deterministic execution with explicit state handling","Error handling excellence with clear messages","Tool selection optimization (Task for complex, Grep for simple)","Context management: essential, project, ephemeral layers","Reproducibility and completion rate metrics"]}
{"type":"entity","name":"solid-principles-overview","entityType":"software_engineering_principles","observations":["SOLID acronym: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion","Introduced by Robert C. Martin (Uncle Bob) in early 2000s","Designed for object-oriented programming but adaptable to other paradigms","Modern perspective emphasizes balanced application over dogmatic adherence","Context and pragmatism crucial factors in implementation"]}
{"type":"entity","name":"prd-living-document-principle","entityType":"product_management","observations":["PRDs must evolve continuously with product lifecycle","Shift from static documentation to dynamic, evolving requirements","Modern teams prioritize iteration and adjust based on real user feedback","Documentation as Code (DaC) treats documentation with same practices as code","Cross-functional ownership rather than handoff-based documentation"]}
{"type":"entity","name":"traditional-fun-game-design-philosophy","entityType":"game_design","observations":["Excellence over innovation: perfect execution of familiar mechanics creates more joy","Human psychology is constant: collecting, overcoming challenges, seeing numbers increase","Polish creates magic: difference between good and great games lies in how it feels","Craftsmanship mindset: respect for medium, attention to detail, iterative perfection","Flow states emerge from challenge-skill equilibrium and clear objectives"]}
{"type":"entity","name":"game-feedback-satisfaction-science","entityType":"game_mechanics","observations":["Immediate Response Principle: actions must register within 100 milliseconds","Confirmation Trinity: visual, audio, and tactile feedback for every action","Reward Cascade: immediate acknowledgment → short-term reward → medium-term progress → long-term achievement","Satisfaction Stack: primary action, secondary effects, systemic results, meta progression","Rhythmic pacing: action and rest, tension and release like music"]}
{"type":"entity","name":"react-native-architecture-2024","entityType":"mobile_framework","observations":["New Architecture enabled by default in React Native 0.76+","JavaScript Interface (JSI) replaces bridge with direct synchronous communication","TurboModules: optimized native module system with lazy loading","Fabric Renderer: complete overhaul of rendering system","Hermes JavaScript engine is default execution environment"]}
{"type":"entity","name":"expo-eslint-setup-official","entityType":"development_tooling","observations":["Official npx expo lint method is simplest and most reliable approach","One-command solution: automatically handles dependency installation and configuration","eslint-config-expo@9.2.0 provides official Expo ESLint configuration","SDK version differences affect --fix flag functionality","npx expo lint --fix provides complete linting and formatting solution"]}
{"type":"entity","name":"react-coordination-patterns","entityType":"architecture_pattern","observations":["Do not use EventBus: feels foreign in React applications","React has built-in composition patterns: props, context, hooks","Composed Observables with Legend-State preferred for feature coordination","Features expose observable state that can be composed at usage points","Composition happens at component level, not through external event systems"]}
{"type":"entity","name":"llm-documentation-taxonomy","entityType":"information_architecture","observations":["Direct Action Information: highest value for execution (exact commands, code snippets)","Conditional Decision Logic: critical for planning (version-specific behaviors, workarounds)","Context & Rationale: helps with decision making (explanations of why approaches preferred)","Validation Commands: test success/failure for quality assurance","Integration Requirements: tool compatibility and file paths"]}